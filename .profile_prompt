
PROFILE_PROMPT="profile_prompt";

MACHINE=/

# Python 2.7.9
export PYTHONHOME=$MACHINE/apps/python-2.7.9
export PATH=$PYTHONHOME/bin:$PATH
alias python=$PYTHONHOME/bin/python2.7
# End of Python 2.7.9

export LD_LIBRARY_PATH=$PYTHONHOME/lib:$LD_LIBRARY_PATH
export PYTHONPATH=$PYTHONHOME/lib/python2.7
export PYTHONPATH=/usr/lib/python2.4/site-packages/:$PYTHONPATH

function prompt_command()
{
        # Colors
        local RED="\[\e[0;31m\]"
        local DARK_RED="\[\e[1;31m\]"
        local GREEN="\[\e[0;32m\]"
        local DARK_GREEN="\[\e[1;32m\]"
        local YELLOW="\[\e[0;33m\]"
        local DARK_YELLOW="\[\e[1;33m\]"
        local BLUE="\[\e[0;34m\]"
        local DARK_BLUE="\[\e[1;34m\]"
        local MAJENTA="\[\e[0;35m\]"
        local DARK_MAJENTA="\[\e[1;35m\]"
        local CYAN="\[\e[0;36m\]"
        local DARK_CYAN="\[\e[1;36m\]"
        local NO_COLOR="\[\e[m\]"

        local EXIT="$?"
        local ERR=" "
        local BR=""

        # Retrieve memory and swap, convert it to Byte
        local MEM_T=$(( $(cat /proc/meminfo | sed -n '/MemTotal/s/ \+/ /gp' | cut -d' ' -f2) * 1024))
        local MEM_F=$(( $(cat /proc/meminfo | sed -n '/MemFree/s/ \+/ /gp' | cut -d' ' -f2) * 1024))
        local SWP_T=$(( $(cat /proc/meminfo | sed -n '/SwapTotal/s/ \+/ /gp' | cut -d' ' -f2) * 1024))
        local SWP_F=$(( $(cat /proc/meminfo | sed -n '/SwapFree/s/ \+/ /gp' | cut -d' ' -f2) * 1024))

        # Calculate the usage percentage and give it a index
        # Percentage: 100% --> 20% --> 5% --> 0%
        # Index:      |---0---|---1---|---2----|
        local MEM_P=$(python -c "v=${MEM_F}.0/${MEM_T}.0*100;print 0 if v > 20 else 1 if v > 5 else 2 ")
        local SWP_P=$(python -c "v=${SWP_F}.0/${SWP_T}.0*100;print 0 if v > 20 else 1 if v > 5 else 2 ")

        # Pick the color according to index
        case $MEM_P in
            0) MEM_C=$GREEN ;;
            1) MEM_C=$YELLOW ;;
            2) MEM_C=$RED ;;
            *) echo oops;;
        esac
        case $SWP_P in
            0) SWP_C=$GREEN ;;
            1) SWP_C=$YELLOW ;;
            2) SWP_C=$RED ;;
            *) echo oops;;
        esac

        # The function to make human readable big numbers
        local PY_CALC=$(cat <<'END_HEREDOC'
def sizeof_fmt(num, suffix='B'):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            print "%3.1f%s%s" % (num, unit, suffix)
            return 0
        num /= 1024.0
    print "%.1f%s%s" % (num, 'Yi', suffix)
    return 0


END_HEREDOC
        )
        
        # We retrieve the IP address
        local ip_v4=$(ip addr show | python -c "
import sys, re
re_head = re.compile(r'^\d+: (?P<name>.*?): .*$')
re_ipv4 = re.compile(r'^\s*inet (?P<ipv4>192\.168\.\d+\.\d+(?:\/\d+)?) .*$')
head = None
for line in sys.stdin:
    m_head = re_head.match(line)
    if m_head is not None:
        head = m_head.groupdict()['name']
        continue
    m_ipv4 = re_ipv4.match(line)
    if m_ipv4 is not None:
        ipv4 = m_ipv4.groupdict()['ipv4']
        print '{}:{}'.format(head, ipv4)
        break
")


        # Make them human readable
        pmemt=$(echo "$PY_CALC 
sizeof_fmt($MEM_T)" | python)
        pmemf=$(echo "$PY_CALC 
sizeof_fmt($MEM_F)" | python)
        pswpt=$(echo "$PY_CALC 
sizeof_fmt($SWP_T)" | python)
        pswpf=$(echo "$PY_CALC 
sizeof_fmt($SWP_F)" | python)

        # Format memory, swap, time and ip
        local MEM="${MEM_C}[Ram ${pmemf}/${pmemt}]$NO_COLOR"
        local SWP="${SWP_C}[Swap ${pswpf}/${pswpt}]$NO_COLOR"
        local TIM="${CYAN}[\t]$NO_COLOR"
        local IP="${DARK_YELLOW}[${ip_v4}]$NO_COLOR"

        local TITLE='\[\e]0;\u@\h:\W\a\]'
	if [ "$EXIT" != 0 ]; then
		ERR='\[\e[1;37m\][\[\e[31m\]'${EXIT}'\[\e[37m\]]'
	fi
	if (( ${#PWD} > ${COLUMNS} - 50 )) ; then
		BR='\n'
	fi

        # Set the prompt
	PS1="${TITLE}# $TIM $MEM $SWP $IP $GREEN\u$NO_COLOR@\h $DARK_BLUE\w$NO_COLOR${ERR}${BR}$GREEN\$$NO_COLOR\n"

#	history -a
#	history -c
#	history -r

}

export PROMPT_COMMAND=prompt_command
